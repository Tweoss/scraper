
use clap::{AppSettings, Clap};

const FORMAT_ABOUT_STRING: &str = "Format specifier
Example usage: \"\\id:\\t\\text\\n\" would result in the id, followed by a colon and a tab, followed by the text, followed by a newline. 
- \\id: The ID of the element 
- \\name: The name of the element, e.g. 'input', 'p', 'h1' 
- \\classes: The classes of the element, printed out as a comma-separated list  
- \\text: The text of the element, generated by looking at each text child  
- \\html: The HTML of the element 
- \\attrs: The attributes of the element, printed out as a key: value comma-separated list 
There can be multiple format specifiers." ;

/// HTML scraper. Takes a target url or file, CSS selector(s), and optional format strings. 
#[derive(Clap)]
#[clap(version = "0.1", author = "Francis C.")]
#[clap(setting = AppSettings::ColoredHelp)]
pub struct Opts {
    /// Target URL or file path.
    pub url_or_file: String,
    /// The CSS Selector to find elements
    /// There can be multiple selectors, e.g. -s div.foo -s div.bar -s #baz
    #[clap(short, long, min_values = 1)]
    pub selector: Vec<String>,
    #[clap(short, long, long_about=FORMAT_ABOUT_STRING)]
    pub format: Option<Vec<String>>,
    /// Whether or not to separate by selector
    #[clap(short, long)]
    pub disparate: bool,
}
